The memory used after creating the 100x100 input array is: 281832
Row: 100; Col: 100
[0, 15,95] [0, 72,91] [1, 93,57] [2, 66,52] [6, 83,8] [7, 24,65] [8, 74,85] [10, 10,33] [11, 1,72] [11, 85,77] [13, 91,84] [14, 93,14] [15, 9,12] [15, 13,45] [15, 66,60] [16, 12,91] [16, 15,52] [18, 41,52] [18, 87,92] [19, 54,20] [20, 77,44] [20, 90,91] [21, 20,23] [26, 76,15] [27, 32,83] [28, 47,62] [28, 50,12] [30, 32,60] [31, 14,87] [31, 89,67] [32, 5,83] [32, 95,32] [35, 53,53] [36, 77,62] [36, 86,86] [37, 89,60] [38, 9,60] [38, 12,66] [38, 38,95] [39, 74,2] [41, 70,44] [42, 38,75] [43, 60,86] [43, 69,48] [44, 92,81] [45, 4,22] [45, 48,49] [47, 45,6] [47, 59,26] [48, 40,79] [48, 53,46] [50, 54,19] [51, 98,75] [52, 26,24] [54, 2,59] [54, 43,9] [54, 90,32] [55, 19,31] [57, 74,27] [58, 37,88] [58, 43,43] [58, 70,55] [58, 95,61] [60, 49,18] [60, 61,33] [61, 13,42] [64, 3,73] [64, 17,66] [65, 39,78] [65, 79,86] [66, 32,99] [66, 61,54] [67, 41,24] [67, 82,4] [69, 4,49] [70, 78,35] [73, 5,13] [73, 73,78] [74, 32,23] [74, 62,37] [77, 29,26] [78, 20,33] [78, 40,11] [79, 73,57] [81, 38,30] [81, 55,15] [82, 61,61] [83, 69,98] [84, 52,88] [85, 8,28] [86, 9,62] [87, 77,46] [87, 80,6] [88, 41,93] [89, 76,88] [92, 50,44] [94, 33,23] [94, 49,46] [98, 90,87] [99, 78,64] 
The time needed to print 100x100 Array is 10 ms.The sum of column 1 is: 72
The time needed to print the sum of column 1 is 0 ms.
The memory used after creating the 500x500 input array is: 1249832
Row: 500; Col: 500
[3, 416,32] [9, 380,99] [9, 384,89] [12, 42,32] [12, 460,30] [15, 467,30] [24, 155,16] [32, 294,79] [33, 423,79] [39, 439,85] [47, 344,94] [52, 443,29] [56, 428,80] [68, 64,20] [79, 491,43] [91, 97,79] [93, 111,59] [94, 376,34] [105, 82,78] [111, 6,63] [113, 393,52] [116, 264,75] [118, 29,32] [134, 52,62] [134, 358,19] [137, 492,48] [143, 138,96] [149, 3,21] [150, 130,79] [152, 124,84] [152, 425,62] [164, 463,88] [166, 464,49] [168, 495,64] [169, 299,74] [174, 480,96] [175, 308,73] [176, 56,27] [188, 194,74] [189, 399,35] [190, 210,91] [191, 399,13] [195, 30,95] [197, 344,13] [198, 351,6] [199, 118,88] [201, 302,78] [206, 497,31] [211, 159,76] [216, 92,35] [217, 1,30] [220, 122,15] [233, 70,18] [233, 314,53] [238, 202,54] [246, 333,64] [272, 152,55] [283, 232,8] [284, 395,58] [295, 294,87] [306, 96,21] [306, 242,16] [311, 171,67] [312, 396,26] [315, 140,5] [324, 472,25] [336, 161,4] [337, 462,25] [338, 439,8] [340, 41,35] [342, 199,6] [344, 76,8] [347, 494,62] [348, 2,33] [364, 362,52] [382, 155,86] [384, 37,20] [398, 334,7] [407, 219,31] [413, 407,4] [428, 429,92] [430, 460,49] [431, 404,87] [433, 31,47] [439, 112,94] [440, 497,36] [450, 59,29] [451, 352,70] [454, 134,73] [456, 157,91] [462, 361,3] [471, 93,73] [475, 418,5] [478, 468,8] [480, 13,63] [481, 230,3] [481, 381,17] [482, 127,4] [485, 306,73] [488, 315,20] 
The time needed to print 500x500 Array is 39 ms.The sum of column 1 is: 30
The time needed to print the sum of column 1 is 0 ms.
The memory used after creating the 1000x1000 input array is: 4260664
Row: 1000; Col: 1000
[3, 230,73] [5, 111,3] [16, 202,36] [16, 584,98] [20, 125,34] [23, 353,13] [39, 916,49] [47, 273,58] [55, 392,56] [77, 795,6] [94, 391,46] [104, 282,38] [112, 539,14] [113, 965,63] [116, 761,99] [123, 320,83] [127, 33,35] [134, 349,61] [135, 337,59] [138, 506,87] [143, 510,30] [151, 188,45] [154, 521,13] [156, 256,13] [157, 217,31] [178, 640,61] [182, 944,96] [185, 839,19] [186, 931,44] [199, 543,71] [211, 865,90] [235, 206,18] [245, 218,50] [246, 725,78] [250, 9,3] [259, 375,13] [277, 847,90] [284, 811,22] [305, 425,95] [312, 934,4] [317, 59,67] [321, 257,20] [323, 585,30] [332, 500,54] [332, 887,8] [335, 770,24] [340, 242,59] [343, 12,54] [343, 730,39] [370, 216,39] [387, 37,28] [388, 581,90] [390, 457,76] [449, 818,89] [452, 936,97] [486, 95,57] [503, 643,99] [508, 323,8] [521, 119,81] [535, 406,81] [598, 813,88] [624, 216,71] [625, 329,4] [654, 367,61] [678, 478,47] [704, 689,41] [711, 484,2] [722, 807,61] [727, 476,93] [729, 386,85] [731, 287,82] [742, 347,29] [765, 231,73] [794, 373,93] [796, 339,71] [799, 871,11] [807, 59,93] [818, 412,80] [829, 166,61] [835, 336,44] [837, 478,89] [838, 638,84] [844, 495,45] [846, 213,72] [846, 695,35] [853, 222,3] [859, 256,42] [875, 117,23] [878, 761,3] [893, 530,82] [905, 198,88] [915, 524,15] [921, 358,47] [922, 435,6] [931, 820,79] [934, 417,4] [950, 968,7] [957, 857,1] [970, 635,59] [978, 649,39] 
The time needed to print 1000x1000 Array is 41 ms.The sum of column 1 is: 0
The time needed to print the sum of column 1 is 1 ms.
The memory used after creating the 2000x2000 input array is: 16280904
Row: 2000; Col: 2000
[9, 969,53] [11, 1402,69] [24, 1584,39] [28, 557,48] [37, 1766,72] [40, 1239,4] [49, 167,54] [96, 322,51] [128, 1787,4] [138, 1838,73] [166, 1693,34] [170, 877,97] [178, 417,75] [196, 1740,89] [213, 411,89] [221, 1232,37] [227, 1367,34] [249, 1072,55] [255, 1447,15] [269, 1224,42] [323, 458,41] [394, 211,33] [451, 267,43] [464, 255,18] [482, 280,92] [491, 1047,85] [541, 1130,73] [548, 157,20] [575, 1264,29] [579, 300,82] [580, 1966,7] [582, 1527,74] [596, 1169,48] [606, 240,30] [631, 111,34] [659, 52,6] [661, 340,62] [743, 575,56] [754, 1796,30] [796, 1919,52] [822, 1484,11] [835, 140,98] [839, 1158,63] [845, 1416,49] [864, 1602,89] [865, 479,83] [872, 781,90] [876, 1313,46] [887, 900,39] [984, 3,22] [1011, 16,88] [1066, 112,95] [1075, 1486,49] [1080, 345,89] [1080, 1476,41] [1089, 1770,31] [1090, 1499,67] [1150, 1521,98] [1158, 461,44] [1229, 224,39] [1260, 337,14] [1291, 1288,62] [1338, 139,36] [1344, 1800,6] [1353, 485,97] [1368, 624,64] [1374, 719,71] [1399, 1947,18] [1414, 1919,47] [1426, 1836,52] [1462, 1712,9] [1508, 292,83] [1511, 795,90] [1542, 1087,10] [1548, 1950,92] [1635, 1413,6] [1649, 1373,11] [1668, 606,1] [1670, 169,91] [1673, 1227,15] [1700, 332,80] [1704, 1061,27] [1707, 1559,35] [1709, 433,41] [1751, 1235,89] [1755, 1918,32] [1757, 1189,46] [1762, 923,48] [1794, 1288,99] [1800, 516,65] [1805, 419,38] [1823, 229,72] [1854, 220,9] [1889, 859,76] [1897, 1540,67] [1919, 1649,79] [1942, 1373,24] [1949, 253,44] [1954, 1048,79] [1998, 1041,75] 
The time needed to print 2000x2000 Array is 116 ms.The sum of column 1 is: 0
The time needed to print the sum of column 1 is 1 ms.
The memory used after creating the 5000x5000 input array is: 100338680
Row: 5000; Col: 5000
[18, 3011,94] [26, 1573,83] [86, 4454,59] [87, 2474,36] [116, 2475,97] [128, 4447,2] [147, 4733,61] [166, 1512,93] [255, 1059,21] [286, 212,37] [331, 980,60] [396, 3517,81] [475, 4777,72] [493, 4130,64] [498, 4009,32] [521, 2569,55] [640, 49,31] [643, 3810,26] [676, 209,96] [691, 2244,87] [695, 2570,67] [722, 443,85] [742, 1136,87] [778, 816,45] [792, 730,92] [822, 4111,20] [855, 3428,51] [1043, 3401,75] [1084, 576,3] [1101, 4740,44] [1187, 4201,50] [1255, 3124,72] [1397, 3395,56] [1401, 4177,75] [1457, 2307,56] [1468, 2658,39] [1482, 1048,70] [1515, 3666,91] [1690, 1278,71] [1721, 199,82] [1922, 2665,76] [1923, 942,45] [1932, 3903,44] [1995, 4130,70] [2016, 575,45] [2061, 3472,3] [2085, 1658,83] [2086, 2382,56] [2087, 737,63] [2184, 3957,25] [2264, 4227,22] [2266, 3026,10] [2314, 3273,31] [2415, 350,43] [2437, 1325,7] [2439, 105,94] [2452, 3285,88] [2539, 3896,91] [2572, 2829,13] [2609, 2574,87] [2677, 3446,63] [2680, 586,74] [2701, 2899,64] [2712, 2956,5] [2815, 3663,95] [2864, 270,59] [3044, 3053,42] [3099, 4262,8] [3145, 1348,76] [3164, 380,30] [3250, 493,54] [3286, 4861,86] [3379, 2390,71] [3419, 2634,48] [3428, 2746,34] [3468, 2598,6] [3496, 1643,81] [3628, 1783,92] [3648, 4855,86] [3700, 675,53] [3865, 926,67] [4031, 4904,86] [4039, 3823,81] [4096, 4969,15] [4102, 4550,52] [4141, 1103,22] [4145, 2401,97] [4157, 2053,4] [4271, 426,63] [4294, 1824,73] [4362, 324,98] [4409, 53,4] [4477, 3255,4] [4668, 2608,4] [4697, 497,92] [4709, 2129,18] [4856, 1270,14] [4890, 2042,68] [4904, 723,46] [4972, 1949,35] 
The time needed to print 5000x5000 Array is 645 ms.The sum of column 1 is: 0
The time needed to print the sum of column 1 is 3 ms.
